// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: grpc/metric/v1/metric.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetricV1Service_UpdateMetricV1_FullMethodName     = "/grpc.metric.v1.MetricV1Service/UpdateMetricV1"
	MetricV1Service_UpdateManyMetricV1_FullMethodName = "/grpc.metric.v1.MetricV1Service/UpdateManyMetricV1"
	MetricV1Service_GetMetricV1_FullMethodName        = "/grpc.metric.v1.MetricV1Service/GetMetricV1"
	MetricV1Service_GetAllMetricV1_FullMethodName     = "/grpc.metric.v1.MetricV1Service/GetAllMetricV1"
)

// MetricV1ServiceClient is the client API for MetricV1Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricV1ServiceClient interface {
	UpdateMetricV1(ctx context.Context, in *UpdateMetricV1Request, opts ...grpc.CallOption) (*UpdateMetricV1Response, error)
	UpdateManyMetricV1(ctx context.Context, in *UpdateManyMetricV1Request, opts ...grpc.CallOption) (*UpdateManyMetricV1Response, error)
	GetMetricV1(ctx context.Context, in *GetMetricV1Request, opts ...grpc.CallOption) (*GetMetricV1Response, error)
	GetAllMetricV1(ctx context.Context, in *GetAllMetricV1Request, opts ...grpc.CallOption) (*GetAllMetricV1Response, error)
}

type metricV1ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricV1ServiceClient(cc grpc.ClientConnInterface) MetricV1ServiceClient {
	return &metricV1ServiceClient{cc}
}

func (c *metricV1ServiceClient) UpdateMetricV1(ctx context.Context, in *UpdateMetricV1Request, opts ...grpc.CallOption) (*UpdateMetricV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMetricV1Response)
	err := c.cc.Invoke(ctx, MetricV1Service_UpdateMetricV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricV1ServiceClient) UpdateManyMetricV1(ctx context.Context, in *UpdateManyMetricV1Request, opts ...grpc.CallOption) (*UpdateManyMetricV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateManyMetricV1Response)
	err := c.cc.Invoke(ctx, MetricV1Service_UpdateManyMetricV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricV1ServiceClient) GetMetricV1(ctx context.Context, in *GetMetricV1Request, opts ...grpc.CallOption) (*GetMetricV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetricV1Response)
	err := c.cc.Invoke(ctx, MetricV1Service_GetMetricV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricV1ServiceClient) GetAllMetricV1(ctx context.Context, in *GetAllMetricV1Request, opts ...grpc.CallOption) (*GetAllMetricV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllMetricV1Response)
	err := c.cc.Invoke(ctx, MetricV1Service_GetAllMetricV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricV1ServiceServer is the server API for MetricV1Service service.
// All implementations must embed UnimplementedMetricV1ServiceServer
// for forward compatibility.
type MetricV1ServiceServer interface {
	UpdateMetricV1(context.Context, *UpdateMetricV1Request) (*UpdateMetricV1Response, error)
	UpdateManyMetricV1(context.Context, *UpdateManyMetricV1Request) (*UpdateManyMetricV1Response, error)
	GetMetricV1(context.Context, *GetMetricV1Request) (*GetMetricV1Response, error)
	GetAllMetricV1(context.Context, *GetAllMetricV1Request) (*GetAllMetricV1Response, error)
	mustEmbedUnimplementedMetricV1ServiceServer()
}

// UnimplementedMetricV1ServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricV1ServiceServer struct{}

func (UnimplementedMetricV1ServiceServer) UpdateMetricV1(context.Context, *UpdateMetricV1Request) (*UpdateMetricV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricV1 not implemented")
}
func (UnimplementedMetricV1ServiceServer) UpdateManyMetricV1(context.Context, *UpdateManyMetricV1Request) (*UpdateManyMetricV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManyMetricV1 not implemented")
}
func (UnimplementedMetricV1ServiceServer) GetMetricV1(context.Context, *GetMetricV1Request) (*GetMetricV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricV1 not implemented")
}
func (UnimplementedMetricV1ServiceServer) GetAllMetricV1(context.Context, *GetAllMetricV1Request) (*GetAllMetricV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMetricV1 not implemented")
}
func (UnimplementedMetricV1ServiceServer) mustEmbedUnimplementedMetricV1ServiceServer() {}
func (UnimplementedMetricV1ServiceServer) testEmbeddedByValue()                         {}

// UnsafeMetricV1ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricV1ServiceServer will
// result in compilation errors.
type UnsafeMetricV1ServiceServer interface {
	mustEmbedUnimplementedMetricV1ServiceServer()
}

func RegisterMetricV1ServiceServer(s grpc.ServiceRegistrar, srv MetricV1ServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetricV1ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricV1Service_ServiceDesc, srv)
}

func _MetricV1Service_UpdateMetricV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricV1ServiceServer).UpdateMetricV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricV1Service_UpdateMetricV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricV1ServiceServer).UpdateMetricV1(ctx, req.(*UpdateMetricV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricV1Service_UpdateManyMetricV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManyMetricV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricV1ServiceServer).UpdateManyMetricV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricV1Service_UpdateManyMetricV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricV1ServiceServer).UpdateManyMetricV1(ctx, req.(*UpdateManyMetricV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricV1Service_GetMetricV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricV1ServiceServer).GetMetricV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricV1Service_GetMetricV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricV1ServiceServer).GetMetricV1(ctx, req.(*GetMetricV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricV1Service_GetAllMetricV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMetricV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricV1ServiceServer).GetAllMetricV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricV1Service_GetAllMetricV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricV1ServiceServer).GetAllMetricV1(ctx, req.(*GetAllMetricV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricV1Service_ServiceDesc is the grpc.ServiceDesc for MetricV1Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricV1Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.metric.v1.MetricV1Service",
	HandlerType: (*MetricV1ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMetricV1",
			Handler:    _MetricV1Service_UpdateMetricV1_Handler,
		},
		{
			MethodName: "UpdateManyMetricV1",
			Handler:    _MetricV1Service_UpdateManyMetricV1_Handler,
		},
		{
			MethodName: "GetMetricV1",
			Handler:    _MetricV1Service_GetMetricV1_Handler,
		},
		{
			MethodName: "GetAllMetricV1",
			Handler:    _MetricV1Service_GetAllMetricV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/metric/v1/metric.proto",
}
