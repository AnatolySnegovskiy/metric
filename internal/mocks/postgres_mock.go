// Code generated by MockGen. DO NOT EDIT.
// Source: storages/clients/postgres.go
//
// Generated by this command:
//
//	mockgen -source=storages/clients/postgres.go -destination=mocks/postgres_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockPgxConnInterface is a mock of PgxConnInterface interface.
type MockPgxConnInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPgxConnInterfaceMockRecorder
}

// MockPgxConnInterfaceMockRecorder is the mock recorder for MockPgxConnInterface.
type MockPgxConnInterfaceMockRecorder struct {
	mock *MockPgxConnInterface
}

// NewMockPgxConnInterface creates a new mock instance.
func NewMockPgxConnInterface(ctrl *gomock.Controller) *MockPgxConnInterface {
	mock := &MockPgxConnInterface{ctrl: ctrl}
	mock.recorder = &MockPgxConnInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgxConnInterface) EXPECT() *MockPgxConnInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPgxConnInterface) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPgxConnInterfaceMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPgxConnInterface)(nil).Close), ctx)
}

// Query mocks base method.
func (m *MockPgxConnInterface) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockPgxConnInterfaceMockRecorder) Query(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPgxConnInterface)(nil).Query), varargs...)
}
