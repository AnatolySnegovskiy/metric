// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/interface.go
//
// Generated by this command:
//
//	mockgen -source=repositories/interface.go -destination=mocks/interface_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	gomock "go.uber.org/mock/gomock"
)

// MockpostgresInterface is a mock of postgresInterface interface.
type MockpostgresInterface struct {
	ctrl     *gomock.Controller
	recorder *MockpostgresInterfaceMockRecorder
}

// MockpostgresInterfaceMockRecorder is the mock recorder for MockpostgresInterface.
type MockpostgresInterfaceMockRecorder struct {
	mock *MockpostgresInterface
}

// NewMockpostgresInterface creates a new mock instance.
func NewMockpostgresInterface(ctrl *gomock.Controller) *MockpostgresInterface {
	mock := &MockpostgresInterface{ctrl: ctrl}
	mock.recorder = &MockpostgresInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostgresInterface) EXPECT() *MockpostgresInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockpostgresInterface) Close() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close.
func (mr *MockpostgresInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockpostgresInterface)(nil).Close))
}

// Exec mocks base method.
func (m *MockpostgresInterface) Exec(sql string, arguments ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockpostgresInterfaceMockRecorder) Exec(sql any, arguments ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{sql}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockpostgresInterface)(nil).Exec), varargs...)
}

// Query mocks base method.
func (m *MockpostgresInterface) Query(sql string, args ...any) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockpostgresInterfaceMockRecorder) Query(sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockpostgresInterface)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockpostgresInterface) QueryRow(sql string, args ...any) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []any{sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockpostgresInterfaceMockRecorder) QueryRow(sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockpostgresInterface)(nil).QueryRow), varargs...)
}
