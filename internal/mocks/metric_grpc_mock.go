// Code generated by MockGen. DO NOT EDIT.
// Source: services/grpc/metric/v1/metric_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=services/grpc/metric/v1/metric_grpc.pb.go -destination=mocks/metric_grpc_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/AnatolySnegovskiy/metric/internal/services/grpc/metric/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMetricV1ServiceClient is a mock of MetricV1ServiceClient interface.
type MockMetricV1ServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricV1ServiceClientMockRecorder
}

// MockMetricV1ServiceClientMockRecorder is the mock recorder for MockMetricV1ServiceClient.
type MockMetricV1ServiceClientMockRecorder struct {
	mock *MockMetricV1ServiceClient
}

// NewMockMetricV1ServiceClient creates a new mock instance.
func NewMockMetricV1ServiceClient(ctrl *gomock.Controller) *MockMetricV1ServiceClient {
	mock := &MockMetricV1ServiceClient{ctrl: ctrl}
	mock.recorder = &MockMetricV1ServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricV1ServiceClient) EXPECT() *MockMetricV1ServiceClientMockRecorder {
	return m.recorder
}

// GetAllMetricV1 mocks base method.
func (m *MockMetricV1ServiceClient) GetAllMetricV1(ctx context.Context, in *v1.GetAllMetricV1Request, opts ...grpc.CallOption) (*v1.GetAllMetricV1Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllMetricV1", varargs...)
	ret0, _ := ret[0].(*v1.GetAllMetricV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetricV1 indicates an expected call of GetAllMetricV1.
func (mr *MockMetricV1ServiceClientMockRecorder) GetAllMetricV1(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetricV1", reflect.TypeOf((*MockMetricV1ServiceClient)(nil).GetAllMetricV1), varargs...)
}

// GetMetricV1 mocks base method.
func (m *MockMetricV1ServiceClient) GetMetricV1(ctx context.Context, in *v1.GetMetricV1Request, opts ...grpc.CallOption) (*v1.GetMetricV1Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricV1", varargs...)
	ret0, _ := ret[0].(*v1.GetMetricV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricV1 indicates an expected call of GetMetricV1.
func (mr *MockMetricV1ServiceClientMockRecorder) GetMetricV1(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricV1", reflect.TypeOf((*MockMetricV1ServiceClient)(nil).GetMetricV1), varargs...)
}

// UpdateManyMetricV1 mocks base method.
func (m *MockMetricV1ServiceClient) UpdateManyMetricV1(ctx context.Context, in *v1.UpdateManyMetricV1Request, opts ...grpc.CallOption) (*v1.UpdateManyMetricV1Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateManyMetricV1", varargs...)
	ret0, _ := ret[0].(*v1.UpdateManyMetricV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateManyMetricV1 indicates an expected call of UpdateManyMetricV1.
func (mr *MockMetricV1ServiceClientMockRecorder) UpdateManyMetricV1(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateManyMetricV1", reflect.TypeOf((*MockMetricV1ServiceClient)(nil).UpdateManyMetricV1), varargs...)
}

// UpdateMetricV1 mocks base method.
func (m *MockMetricV1ServiceClient) UpdateMetricV1(ctx context.Context, in *v1.UpdateMetricV1Request, opts ...grpc.CallOption) (*v1.UpdateMetricV1Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricV1", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricV1 indicates an expected call of UpdateMetricV1.
func (mr *MockMetricV1ServiceClientMockRecorder) UpdateMetricV1(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricV1", reflect.TypeOf((*MockMetricV1ServiceClient)(nil).UpdateMetricV1), varargs...)
}

// MockMetricV1ServiceServer is a mock of MetricV1ServiceServer interface.
type MockMetricV1ServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricV1ServiceServerMockRecorder
}

// MockMetricV1ServiceServerMockRecorder is the mock recorder for MockMetricV1ServiceServer.
type MockMetricV1ServiceServerMockRecorder struct {
	mock *MockMetricV1ServiceServer
}

// NewMockMetricV1ServiceServer creates a new mock instance.
func NewMockMetricV1ServiceServer(ctrl *gomock.Controller) *MockMetricV1ServiceServer {
	mock := &MockMetricV1ServiceServer{ctrl: ctrl}
	mock.recorder = &MockMetricV1ServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricV1ServiceServer) EXPECT() *MockMetricV1ServiceServerMockRecorder {
	return m.recorder
}

// GetAllMetricV1 mocks base method.
func (m *MockMetricV1ServiceServer) GetAllMetricV1(arg0 context.Context, arg1 *v1.GetAllMetricV1Request) (*v1.GetAllMetricV1Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetricV1", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetAllMetricV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetricV1 indicates an expected call of GetAllMetricV1.
func (mr *MockMetricV1ServiceServerMockRecorder) GetAllMetricV1(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetricV1", reflect.TypeOf((*MockMetricV1ServiceServer)(nil).GetAllMetricV1), arg0, arg1)
}

// GetMetricV1 mocks base method.
func (m *MockMetricV1ServiceServer) GetMetricV1(arg0 context.Context, arg1 *v1.GetMetricV1Request) (*v1.GetMetricV1Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricV1", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetMetricV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricV1 indicates an expected call of GetMetricV1.
func (mr *MockMetricV1ServiceServerMockRecorder) GetMetricV1(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricV1", reflect.TypeOf((*MockMetricV1ServiceServer)(nil).GetMetricV1), arg0, arg1)
}

// UpdateManyMetricV1 mocks base method.
func (m *MockMetricV1ServiceServer) UpdateManyMetricV1(arg0 context.Context, arg1 *v1.UpdateManyMetricV1Request) (*v1.UpdateManyMetricV1Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateManyMetricV1", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateManyMetricV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateManyMetricV1 indicates an expected call of UpdateManyMetricV1.
func (mr *MockMetricV1ServiceServerMockRecorder) UpdateManyMetricV1(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateManyMetricV1", reflect.TypeOf((*MockMetricV1ServiceServer)(nil).UpdateManyMetricV1), arg0, arg1)
}

// UpdateMetricV1 mocks base method.
func (m *MockMetricV1ServiceServer) UpdateMetricV1(arg0 context.Context, arg1 *v1.UpdateMetricV1Request) (*v1.UpdateMetricV1Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricV1", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateMetricV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricV1 indicates an expected call of UpdateMetricV1.
func (mr *MockMetricV1ServiceServerMockRecorder) UpdateMetricV1(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricV1", reflect.TypeOf((*MockMetricV1ServiceServer)(nil).UpdateMetricV1), arg0, arg1)
}

// mustEmbedUnimplementedMetricV1ServiceServer mocks base method.
func (m *MockMetricV1ServiceServer) mustEmbedUnimplementedMetricV1ServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetricV1ServiceServer")
}

// mustEmbedUnimplementedMetricV1ServiceServer indicates an expected call of mustEmbedUnimplementedMetricV1ServiceServer.
func (mr *MockMetricV1ServiceServerMockRecorder) mustEmbedUnimplementedMetricV1ServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetricV1ServiceServer", reflect.TypeOf((*MockMetricV1ServiceServer)(nil).mustEmbedUnimplementedMetricV1ServiceServer))
}

// MockUnsafeMetricV1ServiceServer is a mock of UnsafeMetricV1ServiceServer interface.
type MockUnsafeMetricV1ServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMetricV1ServiceServerMockRecorder
}

// MockUnsafeMetricV1ServiceServerMockRecorder is the mock recorder for MockUnsafeMetricV1ServiceServer.
type MockUnsafeMetricV1ServiceServerMockRecorder struct {
	mock *MockUnsafeMetricV1ServiceServer
}

// NewMockUnsafeMetricV1ServiceServer creates a new mock instance.
func NewMockUnsafeMetricV1ServiceServer(ctrl *gomock.Controller) *MockUnsafeMetricV1ServiceServer {
	mock := &MockUnsafeMetricV1ServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMetricV1ServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMetricV1ServiceServer) EXPECT() *MockUnsafeMetricV1ServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMetricV1ServiceServer mocks base method.
func (m *MockUnsafeMetricV1ServiceServer) mustEmbedUnimplementedMetricV1ServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetricV1ServiceServer")
}

// mustEmbedUnimplementedMetricV1ServiceServer indicates an expected call of mustEmbedUnimplementedMetricV1ServiceServer.
func (mr *MockUnsafeMetricV1ServiceServerMockRecorder) mustEmbedUnimplementedMetricV1ServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetricV1ServiceServer", reflect.TypeOf((*MockUnsafeMetricV1ServiceServer)(nil).mustEmbedUnimplementedMetricV1ServiceServer))
}
