// Code generated by MockGen. DO NOT EDIT.
// Source: services/grpc/metric_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=services/grpc/metric_grpc.pb.go -destination=mocks/metric_grpc_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	grpc "github.com/AnatolySnegovskiy/metric/internal/services/grpc"
	gomock "go.uber.org/mock/gomock"
	grpc0 "google.golang.org/grpc"
)

// MockMetricServiceV1Client is a mock of MetricServiceV1Client interface.
type MockMetricServiceV1Client struct {
	ctrl     *gomock.Controller
	recorder *MockMetricServiceV1ClientMockRecorder
}

// MockMetricServiceV1ClientMockRecorder is the mock recorder for MockMetricServiceV1Client.
type MockMetricServiceV1ClientMockRecorder struct {
	mock *MockMetricServiceV1Client
}

// NewMockMetricServiceV1Client creates a new mock instance.
func NewMockMetricServiceV1Client(ctrl *gomock.Controller) *MockMetricServiceV1Client {
	mock := &MockMetricServiceV1Client{ctrl: ctrl}
	mock.recorder = &MockMetricServiceV1ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricServiceV1Client) EXPECT() *MockMetricServiceV1ClientMockRecorder {
	return m.recorder
}

// GetAllMetricV1 mocks base method.
func (m *MockMetricServiceV1Client) GetAllMetricV1(ctx context.Context, in *grpc.MetricV1Request, opts ...grpc0.CallOption) (*grpc.MetricV1ResponseMany, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllMetricV1", varargs...)
	ret0, _ := ret[0].(*grpc.MetricV1ResponseMany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetricV1 indicates an expected call of GetAllMetricV1.
func (mr *MockMetricServiceV1ClientMockRecorder) GetAllMetricV1(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetricV1", reflect.TypeOf((*MockMetricServiceV1Client)(nil).GetAllMetricV1), varargs...)
}

// GetMetricV1 mocks base method.
func (m *MockMetricServiceV1Client) GetMetricV1(ctx context.Context, in *grpc.MetricV1Request, opts ...grpc0.CallOption) (*grpc.MetricV1Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricV1", varargs...)
	ret0, _ := ret[0].(*grpc.MetricV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricV1 indicates an expected call of GetMetricV1.
func (mr *MockMetricServiceV1ClientMockRecorder) GetMetricV1(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricV1", reflect.TypeOf((*MockMetricServiceV1Client)(nil).GetMetricV1), varargs...)
}

// UpdateManyMetricV1 mocks base method.
func (m *MockMetricServiceV1Client) UpdateManyMetricV1(ctx context.Context, in *grpc.MetricV1RequestMany, opts ...grpc0.CallOption) (*grpc.MetricV1ResponseMany, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateManyMetricV1", varargs...)
	ret0, _ := ret[0].(*grpc.MetricV1ResponseMany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateManyMetricV1 indicates an expected call of UpdateManyMetricV1.
func (mr *MockMetricServiceV1ClientMockRecorder) UpdateManyMetricV1(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateManyMetricV1", reflect.TypeOf((*MockMetricServiceV1Client)(nil).UpdateManyMetricV1), varargs...)
}

// UpdateMetricV1 mocks base method.
func (m *MockMetricServiceV1Client) UpdateMetricV1(ctx context.Context, in *grpc.MetricV1Request, opts ...grpc0.CallOption) (*grpc.MetricV1Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricV1", varargs...)
	ret0, _ := ret[0].(*grpc.MetricV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricV1 indicates an expected call of UpdateMetricV1.
func (mr *MockMetricServiceV1ClientMockRecorder) UpdateMetricV1(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricV1", reflect.TypeOf((*MockMetricServiceV1Client)(nil).UpdateMetricV1), varargs...)
}

// MockMetricServiceV1Server is a mock of MetricServiceV1Server interface.
type MockMetricServiceV1Server struct {
	ctrl     *gomock.Controller
	recorder *MockMetricServiceV1ServerMockRecorder
}

// MockMetricServiceV1ServerMockRecorder is the mock recorder for MockMetricServiceV1Server.
type MockMetricServiceV1ServerMockRecorder struct {
	mock *MockMetricServiceV1Server
}

// NewMockMetricServiceV1Server creates a new mock instance.
func NewMockMetricServiceV1Server(ctrl *gomock.Controller) *MockMetricServiceV1Server {
	mock := &MockMetricServiceV1Server{ctrl: ctrl}
	mock.recorder = &MockMetricServiceV1ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricServiceV1Server) EXPECT() *MockMetricServiceV1ServerMockRecorder {
	return m.recorder
}

// GetAllMetricV1 mocks base method.
func (m *MockMetricServiceV1Server) GetAllMetricV1(arg0 context.Context, arg1 *grpc.MetricV1Request) (*grpc.MetricV1ResponseMany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetricV1", arg0, arg1)
	ret0, _ := ret[0].(*grpc.MetricV1ResponseMany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetricV1 indicates an expected call of GetAllMetricV1.
func (mr *MockMetricServiceV1ServerMockRecorder) GetAllMetricV1(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetricV1", reflect.TypeOf((*MockMetricServiceV1Server)(nil).GetAllMetricV1), arg0, arg1)
}

// GetMetricV1 mocks base method.
func (m *MockMetricServiceV1Server) GetMetricV1(arg0 context.Context, arg1 *grpc.MetricV1Request) (*grpc.MetricV1Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricV1", arg0, arg1)
	ret0, _ := ret[0].(*grpc.MetricV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricV1 indicates an expected call of GetMetricV1.
func (mr *MockMetricServiceV1ServerMockRecorder) GetMetricV1(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricV1", reflect.TypeOf((*MockMetricServiceV1Server)(nil).GetMetricV1), arg0, arg1)
}

// UpdateManyMetricV1 mocks base method.
func (m *MockMetricServiceV1Server) UpdateManyMetricV1(arg0 context.Context, arg1 *grpc.MetricV1RequestMany) (*grpc.MetricV1ResponseMany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateManyMetricV1", arg0, arg1)
	ret0, _ := ret[0].(*grpc.MetricV1ResponseMany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateManyMetricV1 indicates an expected call of UpdateManyMetricV1.
func (mr *MockMetricServiceV1ServerMockRecorder) UpdateManyMetricV1(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateManyMetricV1", reflect.TypeOf((*MockMetricServiceV1Server)(nil).UpdateManyMetricV1), arg0, arg1)
}

// UpdateMetricV1 mocks base method.
func (m *MockMetricServiceV1Server) UpdateMetricV1(arg0 context.Context, arg1 *grpc.MetricV1Request) (*grpc.MetricV1Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricV1", arg0, arg1)
	ret0, _ := ret[0].(*grpc.MetricV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricV1 indicates an expected call of UpdateMetricV1.
func (mr *MockMetricServiceV1ServerMockRecorder) UpdateMetricV1(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricV1", reflect.TypeOf((*MockMetricServiceV1Server)(nil).UpdateMetricV1), arg0, arg1)
}

// mustEmbedUnimplementedMetricServiceV1Server mocks base method.
func (m *MockMetricServiceV1Server) mustEmbedUnimplementedMetricServiceV1Server() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetricServiceV1Server")
}

// mustEmbedUnimplementedMetricServiceV1Server indicates an expected call of mustEmbedUnimplementedMetricServiceV1Server.
func (mr *MockMetricServiceV1ServerMockRecorder) mustEmbedUnimplementedMetricServiceV1Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetricServiceV1Server", reflect.TypeOf((*MockMetricServiceV1Server)(nil).mustEmbedUnimplementedMetricServiceV1Server))
}

// MockUnsafeMetricServiceV1Server is a mock of UnsafeMetricServiceV1Server interface.
type MockUnsafeMetricServiceV1Server struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMetricServiceV1ServerMockRecorder
}

// MockUnsafeMetricServiceV1ServerMockRecorder is the mock recorder for MockUnsafeMetricServiceV1Server.
type MockUnsafeMetricServiceV1ServerMockRecorder struct {
	mock *MockUnsafeMetricServiceV1Server
}

// NewMockUnsafeMetricServiceV1Server creates a new mock instance.
func NewMockUnsafeMetricServiceV1Server(ctrl *gomock.Controller) *MockUnsafeMetricServiceV1Server {
	mock := &MockUnsafeMetricServiceV1Server{ctrl: ctrl}
	mock.recorder = &MockUnsafeMetricServiceV1ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMetricServiceV1Server) EXPECT() *MockUnsafeMetricServiceV1ServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMetricServiceV1Server mocks base method.
func (m *MockUnsafeMetricServiceV1Server) mustEmbedUnimplementedMetricServiceV1Server() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetricServiceV1Server")
}

// mustEmbedUnimplementedMetricServiceV1Server indicates an expected call of mustEmbedUnimplementedMetricServiceV1Server.
func (mr *MockUnsafeMetricServiceV1ServerMockRecorder) mustEmbedUnimplementedMetricServiceV1Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetricServiceV1Server", reflect.TypeOf((*MockUnsafeMetricServiceV1Server)(nil).mustEmbedUnimplementedMetricServiceV1Server))
}
