// Code generated by MockGen. DO NOT EDIT.
// Source: services/grpc/metric_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=services/grpc/metric_grpc.pb.go -destination=mocks/metric_grpc_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	grpc "github.com/AnatolySnegovskiy/metric/internal/services/grpc"
	gomock "go.uber.org/mock/gomock"
	grpc0 "google.golang.org/grpc"
)

// MockMetricServiceClient is a mock of MetricServiceClient interface.
type MockMetricServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricServiceClientMockRecorder
}

// MockMetricServiceClientMockRecorder is the mock recorder for MockMetricServiceClient.
type MockMetricServiceClientMockRecorder struct {
	mock *MockMetricServiceClient
}

// NewMockMetricServiceClient creates a new mock instance.
func NewMockMetricServiceClient(ctrl *gomock.Controller) *MockMetricServiceClient {
	mock := &MockMetricServiceClient{ctrl: ctrl}
	mock.recorder = &MockMetricServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricServiceClient) EXPECT() *MockMetricServiceClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMetricServiceClient) Get(ctx context.Context, in *grpc.MetricRequest, opts ...grpc0.CallOption) (*grpc.MetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*grpc.MetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetricServiceClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetricServiceClient)(nil).Get), varargs...)
}

// GetAll mocks base method.
func (m *MockMetricServiceClient) GetAll(ctx context.Context, in *grpc.MetricRequest, opts ...grpc0.CallOption) (*grpc.MetricResponseMany, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(*grpc.MetricResponseMany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMetricServiceClientMockRecorder) GetAll(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMetricServiceClient)(nil).GetAll), varargs...)
}

// Update mocks base method.
func (m *MockMetricServiceClient) Update(ctx context.Context, in *grpc.MetricRequest, opts ...grpc0.CallOption) (*grpc.MetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*grpc.MetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMetricServiceClientMockRecorder) Update(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMetricServiceClient)(nil).Update), varargs...)
}

// UpdateMany mocks base method.
func (m *MockMetricServiceClient) UpdateMany(ctx context.Context, in *grpc.MetricRequestMany, opts ...grpc0.CallOption) (*grpc.MetricResponseMany, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMany", varargs...)
	ret0, _ := ret[0].(*grpc.MetricResponseMany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockMetricServiceClientMockRecorder) UpdateMany(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMany), varargs...)
}

// MockMetricServiceServer is a mock of MetricServiceServer interface.
type MockMetricServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricServiceServerMockRecorder
}

// MockMetricServiceServerMockRecorder is the mock recorder for MockMetricServiceServer.
type MockMetricServiceServerMockRecorder struct {
	mock *MockMetricServiceServer
}

// NewMockMetricServiceServer creates a new mock instance.
func NewMockMetricServiceServer(ctrl *gomock.Controller) *MockMetricServiceServer {
	mock := &MockMetricServiceServer{ctrl: ctrl}
	mock.recorder = &MockMetricServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricServiceServer) EXPECT() *MockMetricServiceServerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMetricServiceServer) Get(arg0 context.Context, arg1 *grpc.MetricRequest) (*grpc.MetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*grpc.MetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetricServiceServerMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetricServiceServer)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockMetricServiceServer) GetAll(arg0 context.Context, arg1 *grpc.MetricRequest) (*grpc.MetricResponseMany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].(*grpc.MetricResponseMany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMetricServiceServerMockRecorder) GetAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMetricServiceServer)(nil).GetAll), arg0, arg1)
}

// Update mocks base method.
func (m *MockMetricServiceServer) Update(arg0 context.Context, arg1 *grpc.MetricRequest) (*grpc.MetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*grpc.MetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMetricServiceServerMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMetricServiceServer)(nil).Update), arg0, arg1)
}

// UpdateMany mocks base method.
func (m *MockMetricServiceServer) UpdateMany(arg0 context.Context, arg1 *grpc.MetricRequestMany) (*grpc.MetricResponseMany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMany", arg0, arg1)
	ret0, _ := ret[0].(*grpc.MetricResponseMany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockMetricServiceServerMockRecorder) UpdateMany(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockMetricServiceServer)(nil).UpdateMany), arg0, arg1)
}

// mustEmbedUnimplementedMetricServiceServer mocks base method.
func (m *MockMetricServiceServer) mustEmbedUnimplementedMetricServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetricServiceServer")
}

// mustEmbedUnimplementedMetricServiceServer indicates an expected call of mustEmbedUnimplementedMetricServiceServer.
func (mr *MockMetricServiceServerMockRecorder) mustEmbedUnimplementedMetricServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetricServiceServer", reflect.TypeOf((*MockMetricServiceServer)(nil).mustEmbedUnimplementedMetricServiceServer))
}

// MockUnsafeMetricServiceServer is a mock of UnsafeMetricServiceServer interface.
type MockUnsafeMetricServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMetricServiceServerMockRecorder
}

// MockUnsafeMetricServiceServerMockRecorder is the mock recorder for MockUnsafeMetricServiceServer.
type MockUnsafeMetricServiceServerMockRecorder struct {
	mock *MockUnsafeMetricServiceServer
}

// NewMockUnsafeMetricServiceServer creates a new mock instance.
func NewMockUnsafeMetricServiceServer(ctrl *gomock.Controller) *MockUnsafeMetricServiceServer {
	mock := &MockUnsafeMetricServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMetricServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMetricServiceServer) EXPECT() *MockUnsafeMetricServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMetricServiceServer mocks base method.
func (m *MockUnsafeMetricServiceServer) mustEmbedUnimplementedMetricServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetricServiceServer")
}

// mustEmbedUnimplementedMetricServiceServer indicates an expected call of mustEmbedUnimplementedMetricServiceServer.
func (mr *MockUnsafeMetricServiceServerMockRecorder) mustEmbedUnimplementedMetricServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetricServiceServer", reflect.TypeOf((*MockUnsafeMetricServiceServer)(nil).mustEmbedUnimplementedMetricServiceServer))
}
